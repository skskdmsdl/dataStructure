💡 배열이란?
같은 타입의 데이터를 나열한 선형 자료구조이다(sequence container)
연속된 메모리 공간에 순차적으로 저장한다
배열의 크기가 고정되어 있고, 선언 시 배열의 크기를 정하고 이를 변경할 수 없다


💡 장점
구현이 쉽다
인덱스를 이용해 접근이 가능해 검색 성능이 좋다
데이터의 크기가 확정적일 때 배열을 사용하는 것이 메모리나 처리속도 면에서 좋다
연속된 메모리 공간에 존재하기 때문에 관리하기가 편하다


💡 단점
삽입과 삭제가 어렵고 오래 걸린다
 - 원소를 삽입하거나 삭제할 경우, 다음 항목의 모든 요소를 이동시켜야 한다(연속된 메모리 공간)
 - 이를 위한 연산작업이 수행되어 비효율적이다.
 - 자료의 수에 비례하여 성능이 떨어지게 된다.
배열의 크기를 바꿀 수 없다.
 - 크게 잡을 경우 메모리가 낭비된다.
 - 작게 잡을 경우 그 이상의 자료를 저장하지 못한다.
메모리의 재사용이 불가능하다.
 - 배열은 초기 사이즈만큼의 메모리를 할당받아 사용하기
 - 데이터의 존재 유무와 관계없이 그 만큼의 메모리를 사용한다.
 - 이미 삭제된 데이터여도 (배열 요소 삭제)
 - 배열 자체를 제거하지 않는 이상 삭제된 공간의 메모리 재사용은 불가능하다.


💡 배열을 사용하는 경우
순차적인 데이터를 저장하며 값보다는 순서가 중요할 때
다차원 데이터를 다룰때
어떤 특정요소를 빠르게 읽어야 할 때
데이터 사이즈가 자주 바뀌지 않으며 요소의 추가/삭제가 적은 경우


💡 시간복잡도
삽입/삭제
 - 배열의 맨 앞에 삽입/삭제 하는 경우 : O(n)
 - 배열의 맨 뒤에 삽입/삭제하는 경우 : O(1)
 - 배열의 중간에 삽입/삭제하는 경우 : O(n)